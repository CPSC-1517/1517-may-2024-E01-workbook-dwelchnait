@page "/productcrud/{productid:int?}"
@rendermode InteractiveServer
<!--
    on the page directive above, a routing parameter has been add
    this will allow an integer value to be passed to this page
    the routing parameter (productid) needs to be declare in your code area below

    if you have the situation where your receive page may or maynot receive a parameter
        value THEN make the datatype nullable (?)
-->
@using WestWindSystem.Entities
@using WestWindSystem.BLL
@inject IJSRuntime JSRunTime


<PageTitle>Product CRUD</PageTitle>

<h3>Product CRUD</h3>

@if (feedbackMessage.Length > 0)
{
    <div class="alert alert-info">
        @feedbackMessage
    </div>
}
<!-- area to error messages-->
@if (errors.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<fieldset>
    <div class="mb-3">
        <label for="ProductId" class="form-label">Product ID</label>
        <input @bind="CurrentProduct.ProductID"
               type="number"
               class="form-control"
               id="ProductId"
               readonly>
    </div>
    <div class="mb-3">
        <label for="productName" class="form-label">Product Name</label>
        <input @bind="CurrentProduct.ProductName"
               type="text"
               class="form-control"
               id="productName">
    </div>
    <div class="mb-3">
        <label for="UnitPrice" class="form-label">Unit Price</label>
        <input @bind="CurrentProduct.UnitPrice"
               type="number"
               class="form-control"
               id="UnitPrice">
    </div>
    <div class="mb-3">
        <label for="categoryid" class="form-label">Category</label>
        <select @bind="CurrentProduct.CategoryID"
                type="text"
                class="form-control"
                id="categoryid">

            <option value="0">--- select a category---</option>
            @foreach (var currentCategory in categories)
            {
                <option value="@currentCategory.CategoryID" 
                    selected="@(currentCategory.CategoryID == CurrentProduct.CategoryID)">
                    @currentCategory.CategoryName
                </option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label for="supplierid" class="form-label">Supplier</label>
        <select @bind="CurrentProduct.SupplierID"
                type="text"
                class="form-control"
                id="supplierid">

            <option value="0">--- select a supplier---</option>
            @foreach (var currentSupplier in suppliers)
            {
                <option value="@currentSupplier.SupplierID" 
                selected="@(currentSupplier.SupplierID == CurrentProduct.SupplierID)">
                    @currentSupplier.CompanyName
                </option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label for="QuantityPerUnit" class="form-label">Quantity Per Unit</label>
        <input @bind="CurrentProduct.QuantityPerUnit"
               type="text"
               class="form-control"
               id="QuantityPerUnit">
    </div>

    <div class="mb-3">
        <label for="MinimumOrderQuantity" class="form-label">MinimumOrderQuantity</label>
        <input @bind="CurrentProduct.MinimumOrderQuantity"
               type="text"
               class="form-control"
               id="MinimumOrderQuantity">
    </div>

    <div class="mb-3">
        <label for="UnitsOnOrder" class="form-label">Units On Order</label>
        <input @bind="CurrentProduct.UnitsOnOrder"
               type="number"
               class="form-control"
               id="UnitsOnOrder">
    </div>

</fieldset>

<div>
   @* this area will be for the form buttons*@
   <button type="submit" class="btn btn-outline-primary rounded-pill"
                @onclick="OnClickSave" style="width:137px;">
      @(CurrentProduct.ProductID == 0 ? "Create" : "Update")
    </button>
   @*  &nbsp;&nbsp;
    <button type="submit" class="btn btn-outline-primary rounded-pill"
            @onclick="OnClickUpdate">
        Update
    </button> *@
    &nbsp;&nbsp;
    @if(CurrentProduct.ProductID != 0)
    {
        <button type="submit" class="btn btn-outline-secondary rounded-pill"
                @onclick="OnClickDiscontinue">
            Discontinue
        </button>
    }

    &nbsp;&nbsp;
    <button type="submit" class="btn btn-outline-secondary rounded-pill"
            @onclick="OnClickReturnQuery">
        Go to query
    </button>
</div>

@code {

    //this variable is the routing parameter that is indicated on the page directive at the top
    //      of this page
    //it needs to be annotation to identify that it is a parameter
    //the datatype of your field needs to match that of the routing parameter on the page directive

    [Parameter]
    public int? productId { get; set; }

    private string? feedbackMessage = "";
    private List<string> errors = new List<string>();

    [Inject]
    private ProductServices _productServices { get; set; }
    private Product CurrentProduct = new();

    [Inject]
    private CategoryServices _categoryServices { get; set; }
    private List<Category> categories = new();

    // private int selectedCategoryId;
    [Inject]
    private SupplierServices _supplierServices { get; set; }
    private List<Supplier> suppliers = new();

    // private int selectedSupplierId;

    [Inject]
    protected NavigationManager CurrentNavigationManager { get; set; }

    protected override void OnInitialized()
    {
        categories = _categoryServices.Categories_Get();
        suppliers = _supplierServices.Suppliers_Get();

        //when the page is first render, we need to determind if the page was called with
        //   a pkey parameter value
        // No value: assumption is a NEW (create) product will be done, nothing to lookup
        // Yes value: assumption an existing product record will be altered or deleted
        //            the current record on the database should be displayed to the use
        //            within this method, lookup the record to display

        if (productId.HasValue)
        {
            //retreive the current record from the database that matches the parameter pkey value
            //the .Value is needed because productId is a nullable int
            CurrentProduct = _productServices.Products_GetByProductID(productId.Value);
        }
        base.OnInitialized();
    }

    private Exception GetInnerException(Exception ex)
    {
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }

    private void OnClickSave()
    {
        //clean out any old messages
        feedbackMessage = "";
        errors.Clear();

        //any validation of form data to be done on the web page

        try
        {
            //all primitive validation should be done at this point
            //primitive validation
            //  presents
            //  datatype
            //  range
            //  limit
            //sample validation
            //check that the category has been picked
            if (CurrentProduct.CategoryID == 0)
            {
                errors.Add("You must select a category");
            }

            //all local validation is done
            if (errors.Count == 0)
            {
                if (CurrentProduct.ProductID == 0)
                {
                    //assume the data is correct

                    //Create (ADD) in Crud
                    //this is a new product
                    //Discontinued will be set to false (datatype default)

                    //remember we have setup the form to fill an instance ov Product
                    //the data on the form has ALREADY been placed into the instance
                    //the ADD service will return the new ProductID
                    //pass the data from the form into the class library BLL Method
                    int newProductID = _productServices.Products_AddProduct(CurrentProduct);

                    //if an exception happened in the class library or database, execution
                    //  will continue in the catch

                    //successful Add
                    //communicate the results to the user
                    feedbackMessage = $"Product (ID:{newProductID}) has been added.";
                    //update the form: change the readonly field ProductID to show the new ProductID
                    CurrentProduct.ProductID = newProductID;
                }
                else
                {
                    //Update (Update) in crUd
                    //this is an existing product


                    int rowsaffected = _productServices.Products_UpdateProduct(CurrentProduct);

                    //if an exception happened in the class library or database, execution
                    //  will continue in the catch

                    //successful Update
                    //communicate the results to the user
                    if (rowsaffected == 0)
                    {
                        feedbackMessage = $"Product {CurrentProduct.ProductName} has not been updated. " +
                        $" Check to see if product is still on file.";
                    }
                    else
                    {
                        feedbackMessage = $"Product (ID:{CurrentProduct.ProductID}) has been updated.";
                    }
                }
            }
        }
        catch(ArgumentNullException ex)
        {
            errors.Add($"Save Error: {GetInnerException(ex).Message}");
        }
        catch (ArgumentException ex)
        {
            errors.Add($"Save Error: {GetInnerException(ex).Message}");
        }
        catch (Exception ex)
        {
            errors.Add($"Save Error: {GetInnerException(ex).Message}");
        }
    }

    // private void OnClickUpdate()
    // {
    //     //clean out any old messages
    //     feedbackMessage = "";
    //     errors.Clear();

    //     //any validation of form data to be done on the web page

    //     try
    //     {
    //         //all primitive validation should be done at this point
    //         //primitive validation
    //         //  presents
    //         //  datatype
    //         //  range
    //         //  limit
    //         //sample validation
    //         //check that the category has been picked
    //         if (CurrentProduct.CategoryID == 0)
    //         {
    //             errors.Add("You must select a category");
    //         }

    //         //all local validation is done
    //         if (errors.Count == 0)
    //         {
    //             //assume the data is correct

    //             //Update (Update) in crUd
    //             //this is an existing product


    //             int rowsaffected = _productServices.Products_UpdateProduct(CurrentProduct);

    //             //if an exception happened in the class library or database, execution
    //             //  will continue in the catch

    //             //successful Update
    //             //communicate the results to the user
    //             if (rowsaffected == 0)
    //             {
    //                 feedbackMessage = $"Product {CurrentProduct.ProductName} has not been updated. " +
    //                 $" Check to see if product is still on file.";
    //             }
    //             else
    //             {
    //                 feedbackMessage = $"Product (ID:{CurrentProduct.ProductID}) has been updated.";
    //             }

    //         }
    //     }
    //     catch (ArgumentNullException ex)
    //     {
    //         errors.Add($"Save Error: {GetInnerException(ex).Message}");
    //     }
    //     catch (ArgumentException ex)
    //     {
    //         errors.Add($"Save Error: {GetInnerException(ex).Message}");
    //     }
    //     catch (Exception ex)
    //     {
    //         errors.Add($"Save Error: {GetInnerException(ex).Message}");
    //     }
    // }

    private async Task OnClickDiscontinue()
    {
        //consider giving the user a second chance to avoid a "bad" mistake
        //  in deleting a record
        //you can prompt the user to confirm that this action needs to be done
        //if you are using the confirmation then the method should be an async Task method

        //clear old messages
        feedbackMessage = "";
        errors.Clear();

        //issue a prompt dialogue to the user to obtain confirmation of the action
        object[] messageline = new object[] {$"Are you sure you want to discountinue {CurrentProduct.ProductName}?"};
        if ( await JSRunTime.InvokeAsync<bool>("confirm",messageline))
        {
            try
            {
                //you could set the logical field here in your event
                // OR
                //it could be set in the service method
                //it does not hurt to do it in both places
                //in our example we handle the setting of this field in the service method

                CurrentProduct.Discontinued = true; //this is optional

                int rowsaffected = _productServices.Products_LogicalDelete(CurrentProduct);

                //if an exception happened in the class library or database, execution
                //  will continue in the catch

                //successful Update
                //communicate the results to the user
                if (rowsaffected == 0)
                {
                    feedbackMessage = $"Product {CurrentProduct.ProductName} is no long on file. " +
                    $" Check to see if product is still on file.";
                }
                else
                {

                    feedbackMessage = $"Product (ID:{CurrentProduct.ProductID}) has been discontinued.";
                    //update  the discontinue attribute on our local copy of the instance
                    CurrentProduct.Discontinued = true;
                }

            }
            catch (ArgumentNullException ex)
            {
                errors.Add($"Save Error: {GetInnerException(ex).Message}");
            }
            catch (ArgumentException ex)
            {
                errors.Add($"Save Error: {GetInnerException(ex).Message}");
            }
            catch (Exception ex)
            {
                errors.Add($"Save Error: {GetInnerException(ex).Message}");
            }
        }
    }
    private void OnClickReturnQuery()
    {
        CurrentNavigationManager.NavigateTo("./categoryproducts");
    }
}
