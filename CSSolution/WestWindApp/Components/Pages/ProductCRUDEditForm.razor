@page "/productcrudeditform/{productid:int?}"
@rendermode InteractiveServer
<!--
    on the page directive above, a routing parameter has been add
    this will allow an integer value to be passed to this page
    the routing parameter (productid) needs to be declare in your code area below

    if you have the situation where your receive page may or maynot receive a parameter
        value THEN make the datatype nullable (?)
-->
@using WestWindSystem.Entities
@using WestWindSystem.BLL
@inject IJSRuntime JSRunTime


<PageTitle>Product CRUD</PageTitle>

<h3>Product CRUD</h3>

@if (feedbackMessage.Length > 0)
{
    <div class="alert alert-info">
        @feedbackMessage
    </div>
}
<!-- area to error messages
@if (errors.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}
-->

<!--
    EditContext registers my EditContext instance for this form 
    DataAnnotationsValidator   the DataAnnotationsValidator component is used within an 
                                EditForm to enable validation based on data annotations 
                                applied to model properties.
    ValidationSummary displays a list of all validation errors
                      show a summary of errors at the top of the form 
                      errors can be from model properties or custom messages
-->
<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
    <ValidationSummary />

 <div class="row">
     <div class="offset-1 col-md-5">
        <div class="mb-3">
            <label for="productpd" class="form-label">Product ID</label>
            <!-- bind-Value is required when using EditForm controls
                 EditForm controls are self closing
                 no type is need for the EditForm control-->
            <InputNumber @bind-Value="CurrentProduct.ProductID"                   
                   class="form-control"
                   id="productid"
                   readonly />
        </div>
        <div class="mb-3">
            <label for="productname" class="form-label">Product Name</label>
            <InputText @bind-Value="CurrentProduct.ProductName"
                   class="form-control"
                   id="productname" />
            <!-- ValidationMessage allows for the display of an annotation message
                 associated with the indicated entity property
            -->
            <ValidationMessage For="@(() => CurrentProduct.ProductName)" />
        </div>
        <div class="mb-3">
            <label for="categoryid" class="form-label">Category</label>
            <!-- InputSelect is not self closing, must have a closing tag-->
            <InputSelect @bind-Value="CurrentProduct.CategoryID"
                    class="form-control"
                    id="categoryid" >

                <option value="0">--- select a category---</option>
                @foreach (var currentCategory in categories)
                {
                    <option value="@currentCategory.CategoryID"
                            selected="@(currentCategory.CategoryID == CurrentProduct.CategoryID)">
                        @currentCategory.CategoryName
                    </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => CurrentProduct.CategoryID)" />
        </div>
        <div class="mb-3">
            <label for="supplierid" class="form-label">Supplier</label>
            <InputSelect @bind-Value="CurrentProduct.SupplierID"
                    class="form-control"
                    id="supplierid">

                <option value="0">--- select a supplier---</option>
                @foreach (var currentSupplier in suppliers)
                {
                    <option value="@currentSupplier.SupplierID"
                            selected="@(currentSupplier.SupplierID == CurrentProduct.SupplierID)">
                        @currentSupplier.CompanyName
                    </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => CurrentProduct.SupplierID)" />
        </div>
     </div>
     <div class="col-md-5">
        <div class="mb-3">
            <label for="QuantityPerUnit" class="form-label">Quantity Per Unit</label>
            <InputText @bind-Value="CurrentProduct.QuantityPerUnit"
                   class="form-control"
                   id="QuantityPerUnit" />
            <ValidationMessage For="@(() => CurrentProduct.QuantityPerUnit)" />
        </div>
        <div class="mb-3">
            <label for="unitprice" class="form-label">Unit Price</label>
            <InputNumber @bind-Value="CurrentProduct.UnitPrice"
                         class="form-control"
                         id="unitprice" />
            <ValidationMessage For="@(() => CurrentProduct.UnitPrice)" />
        </div>
        <div class="mb-3">
            <label for="minimumorderquantity" class="form-label">MinimumOrderQuantity</label>
            <InputNumber @bind-Value="CurrentProduct.MinimumOrderQuantity"
                   class="form-control"
                   id="minimumorderquantity" />
            <ValidationMessage For="@(() => CurrentProduct.MinimumOrderQuantity)" />
        </div>
        <div class="mb-3">
            <label for="unitsonorder" class="form-label">Units On Order</label>
            <InputNumber @bind-Value="CurrentProduct.UnitsOnOrder"
                   class="form-control"
                   id="unitsonorder" />
            <ValidationMessage For="@(() => CurrentProduct.UnitsOnOrder)" />
        </div>
     </div>
 </div>
 <div class="row text-center">
   @* this area will be for the form buttons*@
   <button type="button" class="btn btn-outline-primary rounded-pill"
                @onclick="OnClickSave" style="width:137px;">
      @(CurrentProduct.ProductID == 0 ? "Create" : "Update")
    </button>
   @*  &nbsp;&nbsp;
    <button type="submit" class="btn btn-outline-primary rounded-pill"
            @onclick="OnClickUpdate">
        Update
    </button> *@
    &nbsp;&nbsp;
    @if(CurrentProduct.ProductID != 0)
    {
        <button type="button" class="btn btn-outline-secondary rounded-pill"
                @onclick="OnClickDiscontinue">
            Discontinue
        </button>
    }

    &nbsp;&nbsp;
    <button type="button" class="btn btn-outline-secondary rounded-pill"
            @onclick="OnClickReturnQuery">
        Go to query
    </button>
</div>
</EditForm>

@code {
    [Parameter]
    public int? productId { get; set; }

    private string? feedbackMessage = "";
    private List<string> errors = new List<string>();


    [Inject]
    private ProductServices _productServices { get; set; }
    private Product CurrentProduct = new();

    [Inject]
    private CategoryServices _categoryServices { get; set; }
    private List<Category> categories = new();

    // private int selectedCategoryId;
    [Inject]
    private SupplierServices _supplierServices { get; set; }
    private List<Supplier> suppliers = new();

    [Inject]
    protected NavigationManager CurrentNavigationManager { get; set; }

    //for EditForm
    private EditContext editContext;
    private ValidationMessageStore validationMessageStore;

 

    protected override void OnInitialized()
    {
        //Allows us to programmatically validate the form and manage validation state.
        editContext = new EditContext(CurrentProduct);
        //Used for adding custom validation errors
        validationMessageStore = new ValidationMessageStore(editContext);

        categories = _categoryServices.Categories_Get();
        suppliers = _supplierServices.Suppliers_Get();

        //when the page is first render, we need to determind if the page was called with
        //   a pkey parameter value
        // No value: assumption is a NEW (create) product will be done, nothing to lookup
        // Yes value: assumption an existing product record will be altered or deleted
        //            the current record on the database should be displayed to the use
        //            within this method, lookup the record to display

        if (productId.HasValue)
        {
            //retreive the current record from the database that matches the parameter pkey value
            //the .Value is needed because productId is a nullable int
            CurrentProduct = _productServices.Products_GetByProductID(productId.Value);
        }
        base.OnInitialized();
    }
    private Exception GetInnerException(Exception ex)
    {
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }
    private void OnClickReturnQuery()
    {
        CurrentNavigationManager.NavigateTo("./categoryproducts");
    }
    private async Task OnClickDiscontinue()
    {
        //consider giving the user a second chance to avoid a "bad" mistake
        //  in deleting a record
        //you can prompt the user to confirm that this action needs to be done
        //if you are using the confirmation then the method should be an async Task method

        //clear old messages
        feedbackMessage = "";
        errors.Clear();

        //issue a prompt dialogue to the user to obtain confirmation of the action
        object[] messageline = new object[] { $"Are you sure you want to discountinue {CurrentProduct.ProductName}?" };
        if (await JSRunTime.InvokeAsync<bool>("confirm", messageline))
        {
            try
            {
                //you could set the logical field here in your event
                // OR
                //it could be set in the service method
                //it does not hurt to do it in both places
                //in our example we handle the setting of this field in the service method

                CurrentProduct.Discontinued = true; //this is optional

                int rowsaffected = _productServices.Products_LogicalDelete(CurrentProduct);

                //if an exception happened in the class library or database, execution
                //  will continue in the catch

                //successful Update
                //communicate the results to the user
                if (rowsaffected == 0)
                {
                    feedbackMessage = $"Product {CurrentProduct.ProductName} is no long on file. " +
                    $" Check to see if product is still on file.";
                }
                else
                {

                    feedbackMessage = $"Product (ID:{CurrentProduct.ProductID}) has been discontinued.";
                    //update  the discontinue attribute on our local copy of the instance
                    CurrentProduct.Discontinued = true;
                }

            }
            catch (ArgumentNullException ex)
            {
                errors.Add($"Save Error: {GetInnerException(ex).Message}");
            }
            catch (ArgumentException ex)
            {
                errors.Add($"Save Error: {GetInnerException(ex).Message}");
            }
            catch (Exception ex)
            {
                errors.Add($"Save Error: {GetInnerException(ex).Message}");
            }
        }
    }

    private void OnClickSave()
    {
        //clean out any old messages
        feedbackMessage = "";
        errors.Clear();

        //any validation of form data to be done on the web page

        try
        {
            //all primitive validation should be done at this point
            //primitive validation
            //  presents
            //  datatype
            //  range
            //  limit
            //sample validation
            //check that the category has been picked
            if (CurrentProduct.CategoryID == 0)
            {
                errors.Add("You must select a category");
            }

            //all local validation is done
            if (errors.Count == 0)
            {
                if (CurrentProduct.ProductID == 0)
                {
                    //assume the data is correct

                    //Create (ADD) in Crud
                    //this is a new product
                    //Discontinued will be set to false (datatype default)

                    //remember we have setup the form to fill an instance ov Product
                    //the data on the form has ALREADY been placed into the instance
                    //the ADD service will return the new ProductID
                    //pass the data from the form into the class library BLL Method
                    int newProductID = _productServices.Products_AddProduct(CurrentProduct);

                    //if an exception happened in the class library or database, execution
                    //  will continue in the catch

                    //successful Add
                    //communicate the results to the user
                    feedbackMessage = $"Product (ID:{newProductID}) has been added.";
                    //update the form: change the readonly field ProductID to show the new ProductID
                    CurrentProduct.ProductID = newProductID;
                }
                else
                {
                    //Update (Update) in crUd
                    //this is an existing product


                    int rowsaffected = _productServices.Products_UpdateProduct(CurrentProduct);

                    //if an exception happened in the class library or database, execution
                    //  will continue in the catch

                    //successful Update
                    //communicate the results to the user
                    if (rowsaffected == 0)
                    {
                        feedbackMessage = $"Product {CurrentProduct.ProductName} has not been updated. " +
                        $" Check to see if product is still on file.";
                    }
                    else
                    {
                        feedbackMessage = $"Product (ID:{CurrentProduct.ProductID}) has been updated.";
                    }
                }
            }
        }
        catch (ArgumentNullException ex)
        {
            errors.Add($"Save Error: {GetInnerException(ex).Message}");
        }
        catch (ArgumentException ex)
        {
            errors.Add($"Save Error: {GetInnerException(ex).Message}");
        }
        catch (Exception ex)
        {
            errors.Add($"Save Error: {GetInnerException(ex).Message}");
        }
    }
}
