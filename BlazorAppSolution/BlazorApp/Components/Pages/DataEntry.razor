@page "/dataentry"
<PageTitle> Data Collection</PageTitle>
@rendermode InteractiveServer

<!-- this using is the name space of the Employment class and SupervisoryLevel enum-->
@using OOPsReview; 

<h3>Data Entry Sample</h3>

<div class="row">
    <div class="offset-1 col-md-10">
        <blockquote style="background-color:greenyellow;">
            <p>
                This component will demonstrate how your page can handle validation of data input,
                showing validation messages when you have a number of controls for data entry. This
                component will validate the locate controls and create any validation messages for
                invalid data. The messages can be collected using various techniques such as: List or
                Dictionary.
            </p>
            <p>
                This page will input data for an instance of the Employment class. This demo will
                use the Employment class from the OOPs review. The SupervisoryLevel enum 
                class will also be brought into this project. One could have included the entire
                class library as part of this solution instead of bringing in individual classes.
            </p>
        </blockquote>
    </div>
</div>
<br/>
<!-- area for feedback

     area of good feedback message
-->
@if(feedback.Length > 0)
{
    <div class="alert alert-info">
        <p>@feedback</p>
    </div>
}

<!--
    area for error messages
    this area will display a collection of message that are within a collection
       of strings which are serving as the error message.
    this collection can be a List<String>, a Dictionary<string, string>, as long as it is a collection
-->
@if (errormsgs.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach(var error in errormsgs)
            {
                <!--
                    due to the structure of a Dictionary entry
                    there are two components: Key and Value
                    Here we wish to just use the Value

                    if this was a List collection there is only
                    one component, the string
                    therefore you would NOT need the .Value
                -->
                <li>@error.Value</li>
            }
        </ul>
    </div>
}

<!--
    create your input area (usually reffered to as the form)
    in this course we will use JUST basic html controls
-->
<fieldset>
    <legend>Employment Data</legend>
    <div class="row">
        <div class="col-md-2">
            <label for="title">Position Title:</label>
        </div>
        <div class="col-md-2">
            <input type="text" id="title" @bind="@employmentTitle"
                placeholder="enter position title" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-2">
            <label for="level">Select Supervisory Level:</label>
        </div>
        <div class="col-md-2">
            <select id="level" @bind="@supervisoryLevel">
                <option value="None">select ....</option>
                <!-- get a list of the enum values for SupervisoryLevel
                    and use that collection to control the foreach
                -->
                @foreach(var item in Enum.GetValues(typeof(SupervisoryLevel)))
                {
                    //value= is the data that will be returned from the control
                    //the display on the screen for the user is between the two tags
                    <option value="@item">@item</option>
                }
            </select>
        </div>
    </div>
    <div class="row">
        <div class="col-md-2">
            <label for="startdate">Position Start Date:</label>
        </div>
        <div class="col-md-2">
            <input type="date" id="startdate" @bind="@startDate"
                   placeholder="enter start date" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-2">
            <label for="empyears">Years in Position:</label>
        </div>
        <div class="col-md-2">
            <input type="number" id="empyears" @bind="@empYears"
                   placeholder="years (eg 3.5)"
                   step="0.25" min="0"
                   style="width:75px;"/>
        </div>
    </div>

    <!-- place a row of buttons for the events -->
    <br/><br/>
    <div class="row">
        <div class="col-md-12 text-center">
            <button type="submit"
                    class="btn btn-outline-primary rounded-pill"
                    @onclick="Collect">
                Submit Employment
            </button>
            &nbsp;&nbsp;
            <button type="submit"
                    class="btn btn-outline-secondary rounded-pill"
                    @onclick="Clear">
                Clear
            </button>
            
        </div>
    </div>

</fieldset>


@code {
    private string feedback = "";
    //the first string represents the UNIQUE key value within the dictionary
    //  each entry in the dictionary MUST have a unique key
    //the second string represents the context (value) associated with the key
    private Dictionary<string, string> errormsgs = new();

    //optionally you could just use a List<string> to do the error message collection
    //private List<string> errormsgs = new List<string>();

    //add the variables that will be bound to the input controls
    private string employmentTitle = "";
    private DateTime startDate;
    private double empYears = 0;
    private SupervisoryLevel supervisoryLevel;

    public void Collect()
    {
        feedback = ""; //clear out any old message
        errormsgs.Clear(); //clear out all existing keys and their values

        //primitive valdiation
        //  presence
        //  datatype
        //  range of values

        //Business Rules
        //Title must be presence, must have at least one character
        //start date cannot be in the future
        //years cannot be less than zero

        if(string.IsNullOrWhiteSpace(employmentTitle))
        {
            //if there is a violation of the rule
            //we wish to collect the eror and display to the user
            //we are using a Dictionary in this example that has two components
            //  a) a unquie value that is treat as a key
            //  b) a string which represents the value associated with the key
            errormsgs.Add("Title", "Title is required");
        }

        if( startDate >= DateTime.Today.AddDays(1))
        {
            errormsgs.Add("StartDate", "Start Date is in the future. Must be today or in the past.");
        }

        if(empYears < 0)
        {
            errormsgs.Add("Years", "Years must be 0 or greater (1/4 years allowed, eg 3.75).");
        }

        if (errormsgs.Count == 0)
        {
            feedback = "data is good for further processing";
        }
    }
    public void Clear()
    {
        employmentTitle = "";
        startDate = DateTime.Today;
        empYears = 0;
        supervisoryLevel = SupervisoryLevel.Entry;
        feedback = ""; //clear out any old message
        errormsgs.Clear(); //clear out all existing keys and their values

    }
    protected override void OnInitialized()
    {
        startDate = DateTime.Today;
        base.OnInitialized();
    }
}
