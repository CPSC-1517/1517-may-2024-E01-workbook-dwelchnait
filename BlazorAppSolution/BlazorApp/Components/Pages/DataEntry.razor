@page "/dataentry"
<PageTitle> Data Collection</PageTitle>
@rendermode InteractiveServer

<!-- this using is the name space of the Employment class and SupervisoryLevel enum-->
@using OOPsReview; 

@*
    this injection statement brings in a javascript runtime set of services
    this injection could also be done in your code block using the annotation (below)
*@
@inject IJSRuntime JSRunTime

<h3>Data Entry Sample</h3>

<div class="row">
    <div class="offset-1 col-md-10">
        <blockquote style="background-color:greenyellow;">
            <p>
                This component will demonstrate how your page can handle validation of data input,
                showing validation messages when you have a number of controls for data entry. This
                component will validate the locate controls and create any validation messages for
                invalid data. The messages can be collected using various techniques such as: List or
                Dictionary.
            </p>
            <p>
                This page will input data for an instance of the Employment class. This demo will
                use the Employment class from the OOPs review. The SupervisoryLevel enum 
                class will also be brought into this project. One could have included the entire
                class library as part of this solution instead of bringing in individual classes.
            </p>
        </blockquote>
    </div>
</div>
<br/>
<!-- area for feedback

     area of good feedback message
-->
@if(feedback.Length > 0)
{
    <div class="alert alert-info">
        <p>@feedback</p>
    </div>
}

<!--
    area for error messages
    this area will display a collection of message that are within a collection
       of strings which are serving as the error message.
    this collection can be a List<String>, a Dictionary<string, string>, as long as it is a collection
-->
@if (errormsgs.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach(var error in errormsgs)
            {
                <!--
                    due to the structure of a Dictionary entry
                    there are two components: Key and Value
                    Here we wish to just use the Value

                    if this was a List collection there is only
                    one component, the string
                    therefore you would NOT need the .Value
                -->
                <li>@error.Value</li>
            }
        </ul>
    </div>
}

<!--
    create your input area (usually reffered to as the form)
    in this course we will use JUST basic html controls
-->
<fieldset>
    <legend>Employment Data</legend>
    <div class="row">
        <div class="col-md-2">
            <label for="title">Position Title:</label>
        </div>
        <div class="col-md-2">
            <input type="text" id="title" @bind="@employmentTitle"
                placeholder="enter position title" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-2">
            <label for="level">Select Supervisory Level:</label>
        </div>
        <div class="col-md-2">
            <select id="level" @bind="@supervisoryLevel">
                <option value="None">select ....</option>
                <!-- get a list of the enum values for SupervisoryLevel
                    and use that collection to control the foreach
                -->
                @foreach(var item in Enum.GetValues(typeof(SupervisoryLevel)))
                {
                    //value= is the data that will be returned from the control
                    //the display on the screen for the user is between the two tags
                    <option value="@item">@item</option>
                }
            </select>
        </div>
    </div>
    <div class="row">
        <div class="col-md-2">
            <label for="startdate">Position Start Date:</label>
        </div>
        <div class="col-md-2">
            <input type="date" id="startdate" @bind="@startDate"
                   placeholder="enter start date" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-2">
            <label for="empyears">Years in Position:</label>
        </div>
        <div class="col-md-2">
            <input type="number" id="empyears" @bind="@empYears"
                   placeholder="years (eg 3.5)"
                   step="0.25" min="0"
                   style="width:75px;"/>
        </div>
    </div>

    <!-- place a row of buttons for the events -->
    <br/><br/>
    <div class="row">
        <div class="col-md-12 text-center">
            <button type="submit"
                    class="btn btn-outline-primary rounded-pill"
                    @onclick="Collect">
                Submit Employment
            </button>
            &nbsp;&nbsp;
            <button type="submit"
                    class="btn btn-outline-secondary rounded-pill"
                    @onclick="Clear">
                Clear
            </button>
            &nbsp;&nbsp;
            <button type="submit"
                    class="btn btn-outline-secondary rounded-pill"
                    @onclick="GoToReport">
                Report via method
            </button>
            &nbsp;&nbsp;
            <button type="submit"
                    class="btn btn-outline-secondary rounded-pill">
                <a href="employmentreport">Report via anchor</a>
                
            </button>
        </div>
    </div>

</fieldset>


@code {
    private string feedback = "";
    //the first string represents the UNIQUE key value within the dictionary
    //  each entry in the dictionary MUST have a unique key
    //the second string represents the context (value) associated with the key
    private Dictionary<string, string> errormsgs = new();

    //optionally you could just use a List<string> to do the error message collection
    //private List<string> errormsgs = new List<string>();

    //add the variables that will be bound to the input controls
    private string employmentTitle = "";
    private DateTime startDate;
    private double empYears = 0;
    private SupervisoryLevel supervisoryLevel;

    Employment employment = null;

    //this variable is required if you are using property injection
    //  for services available from the system which are not normally included
    //  for use to your application
    [Inject]
    public IWebHostEnvironment webHostEnvironment { get; set; } = default;

    //this injection is to obtain the navigation manager component
    [Inject]
    private NavigationManager _navManager { get; set; }

    public void Collect()
    {
        feedback = ""; //clear out any old message
        errormsgs.Clear(); //clear out all existing keys and their values

        //primitive valdiation
        //  presence
        //  datatype
        //  range of values

        //Business Rules
        //Title must be presence, must have at least one character
        //start date cannot be in the future
        //years cannot be less than zero

        if(string.IsNullOrWhiteSpace(employmentTitle))
        {
            //if there is a violation of the rule
            //we wish to collect the eror and display to the user
            //we are using a Dictionary in this example that has two components
            //  a) a unquie value that is treat as a key
            //  b) a string which represents the value associated with the key
            errormsgs.Add("Title", "Title is required");
        }

        if( startDate >= DateTime.Today.AddDays(1))
        {
            errormsgs.Add("StartDate", "Start Date is in the future. Must be today or in the past.");
        }

        if(empYears < 0)
        {
            errormsgs.Add("Years", "Years must be 0 or greater (1/4 years allowed, eg 3.75).");
        }

        if (errormsgs.Count == 0)
        {

            //at this point in the collection, the data is "deemed" acceptable
            //
            //if you are using a class to collection and hold your data
            //      you need to be concerned with how the class coding handles
            //      any errors in creating or processing code within the class
            //this normally means some type of try/catch processing
            try
            {
                // create an instance of Employment so I can use the ToString of the class
                //I could create my csv string within this code.
                employment = new Employment(employmentTitle, supervisoryLevel, startDate, empYears);

                //write the class data as a string to a csv text file
                // required:
                // a) know the location of the file (name)
                // b) the technique to use in writing to the file
                //    there are serveral ways to write to the file
                //      a) StreamWriter/StreamReader
                //      b) using the System.IO.File methods
                //           (handles the streaming of the data)

                //WARNING: when you use the System.IO.File you MUST use the
                //          fully qualified naming to the class method you wish\
                //          to use.
                //         you can not get by just using a reference to the
                //           namespace at the top of your code (using System.IO;)


                //there are a couple of ways to refer to your file and its path
                //  i) obtain the root path of your application using an injection
                //      service called IWebHostEnvironment via property injection (see variables)
                //  ii) use relative addressing starting a the top of your application

                //in this example we will demonstrate property injection
                //the method that will be use will return the path from the
                //  top of your drive to the top of your application
                //append the remainder part of the file path to this result (via concentation)

                //WARNING: the folder slash for your path can be both a forward or back slash
                //              on a PC BUT for an Apple machine, you must use the forward slash (/)
                string csvFilePathName = $@"{webHostEnvironment.ContentRootPath}/Data/Employments.csv";

                //write the data from the employment instance (ToString) as a line to the csv file
                //since the string does not contain a line feed character, we will need to concatenate
                //  the character (\n)
                //the System.IO.File method will be AppendAllText(string)
                // AppendAllText will
                //   a) create the file if it does not exist
                //   b) opens
                //   c) writes the text
                //   d) closes
                string line = $"{employment.ToString()}\n";
                System.IO.File.AppendAllText(csvFilePathName,line);
                feedback = "data is good for further processing";
            }
            catch (ArgumentNullException ex)
            {
                errormsgs.Add("Missing data", GetInnerException(ex).Message);
            }
            catch (ArgumentOutOfRangeException ex)
            {
                errormsgs.Add("Range Exception", GetInnerException(ex).Message);
            }
            catch (ArgumentException ex)
            {
                errormsgs.Add("Rule Exception", GetInnerException(ex).Message);
            }
            catch (Exception ex)
            {
                errormsgs.Add("System Error", GetInnerException(ex).Message);
            }
        }
    }
    //not using a JSRunTime services
    // public void Clear()
    // {
    //     employmentTitle = "";
    //     startDate = DateTime.Today;
    //     empYears = 0;
    //     supervisoryLevel = SupervisoryLevel.Entry;
    //     feedback = ""; //clear out any old message
    //     errormsgs.Clear(); //clear out all existing keys and their values

    // }

    //using the JSRunTime service
    //the setup of the method now is an async Task
    public async Task Clear()
    {

        feedback = ""; //clear out any old message
        errormsgs.Clear(); //clear out all existing keys and their values


        //WARNING: remember to insert your Injection of IJSRunTime

        //issue a prompt dialogue to the user to obtain confirmation of the action
        //create your message for the dialogue box into an generic object
        object[] messageline = new object[] { "Clearing will lose all unsaved data. Are you sure you want to clear the form?" };
        if (await JSRunTime.InvokeAsync<bool>("confirm", messageline))
        {
            //the INvokeAsync will cause a dialogue box to appear with my message line
            //this component code is to wait until the dialogue sends a value back
            //the returning value will be a true or false
            employmentTitle = "";
            startDate = DateTime.Today;
            empYears = 0;
            supervisoryLevel = SupervisoryLevel.Entry;
        }

    }
    protected override void OnInitialized()
    {
        startDate = DateTime.Today;
        base.OnInitialized();
    }

    private Exception GetInnerException(Exception ex)
    {
        //drill down into your Exception until there are no more inner exceptions
        //at this point you have the "real" error
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }

    private void GoToReport()
    {
        //this event will use the Navigate services of the seb software
        //the Navigate services must be injected into the page
        //the location you are going to is reference by the page's routing name
        _navManager.NavigateTo("employmentreport");
    }
}
